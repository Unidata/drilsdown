<controls>
<control 
	 id="jythoncontrol_verticalprofile" 
	 description="Vertical Profile" 
	 class="ucar.unidata.idv.control.JythonControl" 
	 label="Vertical Profile" 
 displaycategory="Mapes-Collection" 
	 categories="GRID-3D-*" 
	 canstandalone="false" 
	 properties="displayName=Vertical Profile;windowVisible=true;probeType=vertical;developerMode=false;" 
><property name="jythonCode"><![CDATA[#These are example jython procedures that get called by the JythonControl 
from javax.swing import *
from javax.swing.JLabel import *
from javax.swing import JLabel
from javax.swing import JTextArea
from javax.swing import JScrollPane	
from javax.swing import JFrame
from javax.swing import JLabel
from javax.swing import ImageIcon
from java.awt import Image
from ucar.unidata.ui import ImageUtils
from java.awt.image import BufferedImage;

from javax.swing import JTextArea
from javax.swing import JScrollPane

from javax.swing import JPanel
from java.awt.event import ActionListener

import java.awt.Dimension

from ucar.unidata.util import GuiUtils
from ucar.unidata.ui import LatLonWidget

import org.jfree.chart.ChartFactory
from org.jfree.data.xy import XYSeriesCollection
from org.jfree.data.xy import XYSeries

from org.jfree.chart.plot import XYPlot
from org.jfree.chart import ChartPanel;
from org.jfree.chart import ChartUtilities;

from org.jfree.chart import ChartFactory;
from org.jfree.chart import JFreeChart;
from org.jfree.chart.axis import NumberAxis;
from org.jfree.chart.renderer.xy import XYSplineRenderer;
from org.jfree.chart.plot.PlotOrientation import VERTICAL
from org.jfree.chart.plot.PlotOrientation import HORIZONTAL
from org.jfree.chart.renderer.xy import DeviationRenderer
from java.awt import BasicStroke;
from java.awt import Color
from javax.swing import JFrame

from ucar.unidata.ui import ImageUtils
from ucar.unidata.util import FileManager


def handleInit (displayControl):
        displayControl.addSaveMenuItem('Save Chart Image...','menuCallback');
	displayControl.addEditMenuItem('Fix Axis Range to View','setChartRanges');

	displayControl.setVar('XRange',"None")
	displayControl.setVar('YRange',"None")
	
	panl=ChartPanel(None)
	panl.setPreferredSize(java.awt.Dimension(600, 400))
        panl.setMouseWheelEnabled(True);
        panl.setVisible(True)
        displayControl.setVar('panl',panl)

         
	jp=JPanel()

        lllisten=llListener()
	latLonWidget = LatLonWidget("Lat: ", "Lon: ",lllisten);       
        displayControl.setVar('latLonWidget',latLonWidget)

        
        
	if len(displayControl.getAnimationTimes())==0:
		aniWidget    = displayControl.getAnimationWidget().getContents(False);
		bottomPanel = GuiUtils.leftRight(aniWidget, latLonWidget);
        	bottomPanel = GuiUtils.inset(bottomPanel, 5)
        	displayControl.setVar('bottomPanel',bottomPanel)
	else:
		bottomPanel = GuiUtils.right(latLonWidget);
        	bottomPanel = GuiUtils.inset(bottomPanel, 5)
        	displayControl.setVar('bottomPanel',bottomPanel)

	panl=GuiUtils.centerBottom(panl,bottomPanel)
        jp.add(panl)


        displayControl.setJythonComponent(jp)

#      	 thumb=chart.createBufferedImage(120, 80, 360, 240,None)
#        myTimes=GridUtil.getTimeSet(di.getGrid())
#   	 displayControl.getAnimationWidget().setBaseTimes(myTimes)
	
	legend=JPanel()
	legend.add(JLabel("Vertical Profile"));
	#legend.add(thumb)
	displayControl.setLegendComponent (legend);


#This gets called when there is data that has been loaded
def handleData (displayControl):
	return

#This gets called when the animation time changes
def handleTime (displayControl, probeLocation):
	handleProbe (displayControl, probeLocation)
#This gets called when the probe position has changed. 
def handleProbe (displayControl, probeLocation):

	animationTime = displayControl.getAnimationTime();  
	jcdi=displayControl.getDataInstance()

	if not animationTime==None:
	    sample=jcdi.getData().evaluate(animationTime)
        else:
            sample=jcdi.getData().getSample(0)
	
	displayControl.setVar('sample',sample)
   	llp=probeLocation[0].getLatLonPoint()
    	data=GridUtil.getProfileAtLatLonPoint(sample,llp)
   
	panl=displayControl.getVar('panl')
    	panl.setChart(makeVerticalPlot(makeChartData(data),displayControl))

    	latLonWidget=displayControl.getVar('latLonWidget')
	latLonWidget.setLat(displayControl.getDisplayConventions().formatLatLon(
                        llp.getLatitude().getValue()));
    	latLonWidget.setLon(displayControl.getDisplayConventions().formatLatLon(llp.getLongitude().getValue()));
	
	#switching off Thumbnail for now
	#chart=displayControl.getVar("chart")
    	#thumb=chart.createBufferedImage(270, 180)
	#displayControl.setLegendComponent (JLabel(ImageIcon(thumb)));

def makeChartData(data):
  	dataset=XYSeriesCollection()
    	try:
		series=XYSeries(displayControl.getDataChoices()[0].getName())
    	except:
        	series=XYSeries(displayControl.getDataChoices()[0].getDescription())
    	ods=data.getDomainSet()
    	levs=ods.getSamples(False)[2]
    	values=data.getValues()[0]
    	for lev,val in zip(levs,values):
        	series.add(lev,val)
    	dataset.addSeries(series)
    	return dataset


def makeVerticalPlot(dataset,displayControl):
    chart = ChartFactory.createXYLineChart("Vertical Profile", "Level","W", dataset,HORIZONTAL, True, True, False)
    renderer=chart.getPlot().getRenderer()
    renderer.setBaseStroke(BasicStroke(2.0));
    renderer.setAutoPopulateSeriesStroke(False);
    renderer.setSeriesPaint(0,displayControl.getColor())
    
    sample=displayControl.getVar("sample")
    xName = str(GridUtil.getParamUnits(sample)[0])
    yName = str(GridUtil.getVerticalUnit(sample))
    xAxis = NumberAxis(xName);
    

    yAxis = NumberAxis(yName);
    
    XRange=displayControl.getVar('XRange')
    YRange=displayControl.getVar('YRange')
    if not XRange=="None":
    	yAxis.setRange(XRange)
    if not YRange=="None":
    	xAxis.setRange(YRange)   
    yAxis.setInverted(True)
    
    chart.getPlot().setRangeAxis(xAxis)
    chart.getPlot().setDomainAxis(yAxis)

    chart.setBackgroundPaint(Color.white)
    chart.getPlot().setBackgroundPaint(Color.white)
    chart.getPlot().setDomainGridlinesVisible(True)
    chart.getPlot().setRangeGridlinesVisible(True)
    chart.getPlot().setDomainGridlinePaint(Color.black)
    chart.getPlot().setRangeGridlinePaint(Color.black)

    displayControl.setVar('chart',chart)
    return chart

class llListener(ActionListener):
	def actionPerformed( self,event):
        	handleLatLonChange()

def handleLatLonChange():
    latLonWidget=displayControl.getVar('latLonWidget')
    try:   
    	lat = latLonWidget.getLat();
    	lon = latLonWidget.getLon();
    	xyz = displayControl.earthToBox(makeEarthLocation(lat, lon, 0));
    	displayControl.setProbePosition(xyz[0], xyz[1]);
    except:
        print('error')

def menuCallback(displayControl):
        filename=FileManager.getWriteFile()
	ImageUtils.writeImageToFile(displayControl.getImage(),filename)

def setChartRanges(displayControl):
        panl = displayControl.getVar('panl')
        plt=panl.getChart().getPlot()
        displayControl.setVar('XRange',plt.getDomainAxis().getRange())
	displayControl.setVar('YRange',plt.getRangeAxis().getRange())
]]></property></control>

<control 
	 id="jythoncontrol_multi-verticalprofile" 
	 description="Multi-Variable Vertical Profile" 
	 class="ucar.unidata.idv.control.JythonControl" 
	 label="Multi-Variable Vertical Profile" 
 displaycategory="Mapes-Collection" 
	 categories="GRID-3D-*" 
	 canstandalone="false" 
	 properties="displayName=Multi-Variable Vertical Profile;windowVisible=true;probeType=vertical;developerMode=false;" 
><property name="jythonCode"><![CDATA[#These are example jython procedures that get called by the JythonControl 
#These are example jython procedures that get called by the JythonControl 
from javax.swing import *
from javax.swing.JLabel import *
from javax.swing import JLabel
from javax.swing import JTextArea
from javax.swing import JScrollPane	
from javax.swing import JFrame
from javax.swing import JLabel
from javax.swing import ImageIcon
from java.awt import Image
from ucar.unidata.ui import ImageUtils
from java.awt.image import BufferedImage;

from javax.swing import JTextArea
from javax.swing import JScrollPane

from javax.swing import JPanel
from javax.swing import JButton

from java.awt.event import ActionListener


import java.awt.Dimension

from ucar.unidata.util import GuiUtils
from ucar.unidata.ui import LatLonWidget

import org.jfree.chart.ChartFactory
from org.jfree.data.xy import XYSeriesCollection
from org.jfree.data.xy import XYSeries

from org.jfree.chart.plot import XYPlot
from org.jfree.chart import ChartPanel;
from org.jfree.chart import ChartUtilities;

from org.jfree.chart import ChartFactory;
from org.jfree.chart import JFreeChart;
from org.jfree.chart.axis import NumberAxis;
from org.jfree.chart.renderer.xy import XYSplineRenderer;
from org.jfree.chart.plot.PlotOrientation import VERTICAL
from org.jfree.chart.plot.PlotOrientation import HORIZONTAL
from org.jfree.chart.renderer.xy import DeviationRenderer
from java.awt import BasicStroke;
from java.awt import Color
from javax.swing import JFrame

from ucar.unidata.ui import ImageUtils
from ucar.unidata.util import FileManager

class dataListen(ActionListener):
	def __init__(self,dc):
		self.displayControl=dc
	def actionPerformed(self,event):
        	displayControl.addData("")
                handleProbe(self.displayControl,self.displayControl.probeLocation)
def handleInit (displayControl):
        displayControl.addSaveMenuItem('Save Chart Image...','menuCallback');
	displayControl.addEditMenuItem('Fix Axis Range to View','setChartRanges');

	displayControl.setVar('XRange',"None")
	displayControl.setVar('YRange',"None")
	
	panl=ChartPanel(None)
	panl.setPreferredSize(java.awt.Dimension(600, 400))
        panl.setMouseWheelEnabled(True);
        panl.setVisible(True)
        displayControl.setVar('panl',panl)

         
	jp=JPanel()

        lllisten=llListener(displayControl)
	latLonWidget = LatLonWidget("Lat: ", "Lon: ",lllisten);       
        displayControl.setVar('latLonWidget',latLonWidget)

	aniWidget    = displayControl.getAnimationWidget().getContents(False);
	
	button1 = JButton("Add Dataset");
        button1.setActionCommand("ADD_DATASET");
	dal=dataListen(displayControl)
        button1.addActionListener(dal);


        
        
	if len(displayControl.getAnimationTimes())==0:
		aniWidget    = displayControl.getAnimationWidget().getContents(False);
	        bottomPanel = GuiUtils.leftCenterRight(aniWidget,button1,latLonWidget);
                bottomPanel = GuiUtils.inset(bottomPanel, 5)
       		displayControl.setVar('bottomPanel',bottomPanel)
	else:   
	
		bottomPanel = GuiUtils.centerRight(button1,latLonWidget);
        	bottomPanel = GuiUtils.inset(bottomPanel, 5)
        	displayControl.setVar('bottomPanel',bottomPanel)


	panl=GuiUtils.centerBottom(panl,bottomPanel)
        jp.add(panl)


        displayControl.setJythonComponent(jp)

#      	 thumb=chart.createBufferedImage(120, 80, 360, 240,None)
#        myTimes=GridUtil.getTimeSet(di.getGrid())
#   	 displayControl.getAnimationWidget().setBaseTimes(myTimes)
	
	legend=JPanel()
	legend.add(JLabel("Vertical Profile"));
	#legend.add(thumb)
	displayControl.setLegendComponent (legend);


#This gets called when there is data that has been loaded
def handleData (displayControl):
	return

#This gets called when the animation time changes
def handleTime (displayControl, probeLocation):
	handleProbe (displayControl, probeLocation)
#This gets called when the probe position has changed. 
def handleProbe (displayControl, probeLocation):

	animationTime = displayControl.getAnimationTime();  
	#jcdi=displayControl.getDataInstance()

	#if not animationTime==None:
	#    sample=jcdi.getData().evaluate(animationTime)
        #else:
        #    sample=jcdi.getData().getSample(0)

	data=[]
	llp=probeLocation[0].getLatLonPoint()
	dsel=displayControl.getDataSelection()

	for dataC in displayControl.getDataChoices():
		dsel=dataC.getDataSelection() #this one or from displayControl
		try:
	        	if not animationTime==None:
		        	datatemp=GridUtil.getProfileAtLatLonPoint(dataC.getData(dsel).evaluate(animationTime),llp)
	        	else:
		        	datatemp=GridUtil.getProfileAtLatLonPoint(dataC.getData(dsel).getSample(0),llp)
			dataname=dataC.getName()
			data.append({'name':dataname,'data':datatemp})
		except:
			pass
	sample=displayControl.getDataChoices()[0].getData(dsel).getSample(0)
	displayControl.setVar('sample',sample)
  	displayControl.setVar('data',data)
   
	panl=displayControl.getVar('panl')
    	panl.setChart(makeVerticalPlot(makeChartData(data),displayControl))

    	latLonWidget=displayControl.getVar('latLonWidget')
	latLonWidget.setLat(displayControl.getDisplayConventions().formatLatLon(
                        llp.getLatitude().getValue()));
    	latLonWidget.setLon(displayControl.getDisplayConventions().formatLatLon(llp.getLongitude().getValue()));
	
	#Disabled Legend for now
	#chart=displayControl.getVar("chart")
    	#thumb=chart.createBufferedImage(270, 180)
	#displayControl.setLegendComponent (JLabel(ImageIcon(thumb)));

def makeChartData(data):
  	dataset=XYSeriesCollection()
        for da in data:
    		series=XYSeries(da['name'])
		ods=da['data'].getDomainSet()
    		levs=ods.getSamples(False)[2]
    		values=da['data'].getValues()[0]
    		for lev,val in zip(levs,values):
        		series.add(lev,val)
		try:
    			dataset.addSeries(series)
		except:	
			if da['name'].upper()==da['name']:
				series.setKey(da['name'].lower())
			else:
				series.setKey(da['name'].upper())
    		        dataset.addSeries(series)
		finally:
			pass
    	return dataset


def makeVerticalPlot(dataset,displayControl):
    chart = ChartFactory.createXYLineChart("Vertical Profile", "Level","W", dataset,HORIZONTAL, True, True, False)
   
    DCV=displayControl.getDisplayConventions()
    dcolor=DCV.getColorName(displayControl.getColor())
    colors=(n for n in DCV.getColorNameList() if not n=='white' or not n==dcolor)
    displayControl.setVar('colors',colors)

    renderer=chart.getPlot().getRenderer()
    renderer.setBaseStroke(BasicStroke(2.0));
    renderer.setAutoPopulateSeriesStroke(False);
    renderer.setSeriesPaint(0,displayControl.getColor())
    for i in range(dataset.getSeriesCount()):
	if i==0: 
        	renderer.setSeriesPaint(i,displayControl.getColor())
	else:
    		renderer.setSeriesPaint(i,DCV.getColor(colors.next()))
 
    sample=displayControl.getVar("sample")
    xName = str(GridUtil.getParamUnits(sample)[0])
    yName = str(GridUtil.getVerticalUnit(sample))
    xAxis = NumberAxis(xName);
    

    yAxis = NumberAxis(yName);
    
    #XRange=displayControl.getVar('XRange')
    #YRange=displayControl.getVar('YRange')
    #if not XRange=="None":
    #	yAxis.setRange(XRange)
    #if not YRange=="None":
    # 	xAxis.setRange(YRange)   
    yAxis.setInverted(True)
    
    chart.getPlot().setRangeAxis(xAxis)
    chart.getPlot().setDomainAxis(yAxis)

    chart.setBackgroundPaint(Color.white)
    chart.getPlot().setBackgroundPaint(Color.white)
    chart.getPlot().setDomainGridlinesVisible(True)
    chart.getPlot().setRangeGridlinesVisible(True)
    chart.getPlot().setDomainGridlinePaint(Color.black)
    chart.getPlot().setRangeGridlinePaint(Color.black)

    displayControl.setVar('chart',chart)
    return chart

class llListener(ActionListener):
	def __init__(self,dc):
		self.displayControl=dc
	def actionPerformed( self,event):
        	handleLatLonChange(self.displayControl)

def handleLatLonChange(displayControl):
    latLonWidget=displayControl.getVar('latLonWidget')
    try:   
    	lat = latLonWidget.getLat();
    	lon = latLonWidget.getLon();
    	xyz = displayControl.earthToBox(makeEarthLocation(lat, lon, 0));
    	displayControl.setProbePosition(xyz[0], xyz[1]);
    except:
        print('error')

def menuCallback(displayControl):
        filename=FileManager.getWriteFile()
	ImageUtils.writeImageToFile(displayControl.getImage(),filename)

def setChartRanges(displayControl):
        panl = displayControl.getVar('panl')
        plt=panl.getChart().getPlot()
        displayControl.setVar('XRange',plt.getDomainAxis().getRange())
	displayControl.setVar('YRange',plt.getRangeAxis().getRange())
]]></property></control>

<control 
	 id="jythoncontrol_verticalcrossection" 
	 description="Vertical Crossection" 
	 class="ucar.unidata.idv.control.JythonControl" 
	 label="Vertical Crossection" 
 displaycategory="Mapes-Collection" 
	 categories="GRID-3D-*" 
	 canstandalone="false" 
	 properties="displayName=Crossection;windowVisible=true;probeType=transect;developerMode=false;" 
><property name="jythonCode"><![CDATA[#These are example jython procedures that get called by the JythonControl 
from javax.swing import *
from javax.swing.JLabel import *
from javax.swing import JLabel
from javax.swing import JTextArea
from javax.swing import JScrollPane	

from java.awt import Color;
from java.awt import Font;

from org.jfree.chart.title import PaintScaleLegend
from javax.swing import JPanel;
from javax.swing import JFrame
from org.jfree.chart import ChartPanel;
from org.jfree.chart import ChartUtilities;
from org.jfree.chart import JFreeChart;
from org.jfree.chart.axis import AxisLocation;
from org.jfree.chart.axis import NumberAxis;
from org.jfree.chart.block import BlockBorder;
from org.jfree.chart.plot import XYPlot;
from org.jfree.chart.renderer import GrayPaintScale;
from org.jfree.chart.renderer import PaintScale;
from org.jfree.chart.renderer.xy import XYBlockRenderer;
from org.jfree.chart.title import PaintScaleLegend;
from org.jfree.data import DomainOrder;
from org.jfree.data.general import DatasetChangeListener;
from org.jfree.data.general import DatasetGroup;
from org.jfree.data.xy import XYZDataset;
from org.jfree.ui import ApplicationFrame;
from org.jfree.ui import RectangleEdge;
from org.jfree.ui import RectangleInsets;
from org.jfree.ui import RefineryUtilities;

from org.jfree.data.xy import XYZDataset;
from org.jfree.data.xy import DefaultXYZDataset

from org.jfree.data.general import DefaultHeatMapDataset;
from org.jfree.data.general import HeatMapDataset;
from org.jfree.data.general import HeatMapUtilities;
from org.jfree.chart.annotations import XYDataImageAnnotation
from org.jfree.chart import ChartFactory;
from org.jfree.chart.plot import PlotOrientation
from org.jfree.data.xy import XYDataset;
from org.jfree.data.xy import XYSeriesCollection;
from org.jfree.ui import  Layer
from org.jfree.chart.renderer import LookupPaintScale
from java.lang import Math



#This gets called when the JythonControl is first created.
def handleInit (displayControl):
	exampleInit(displayControl);

#This gets called when there is data that has been loaded
def handleData (displayControl):
	exampleData(displayControl);

#This gets called when the probe position has changed. 
def handleProbe (displayControl, probeLocation):
	exampleProbe(displayControl,probeLocation);

#This gets called when the animation time changes
def handleTime (displayControl, probeLocation):
	exampleTime(displayControl,probeLocation);


#This gets called when the JythonControl is first created.
def exampleInit (displayControl):
	#You can add any number of menuitems to the different menus
	#displayControl.addSaveMenuItem('save 2','menuCallback');
	#displayControl.addFileMenuItem('file 1','menuCallback');
	#displayControl.addEditMenuItem('edit 1','menuCallback');
	#displayControl.addViewMenuItem('view 1','menuCallback');

        #Create a JTextArea and put it into the display's window
	comp = JTextArea  ("",8,30)
        comp.setEditable(0)


	#setJythonComponent sets the GUI
	
	panl=ChartPanel(None)
        panl.setPreferredSize(java.awt.Dimension(600, 400))
        panl.setMouseWheelEnabled(True);
        panl.setVisible(True)
        displayControl.setVar('panl',panl)
	jp=JPanel()
	jp.add(panl)
	displayControl.setJythonComponent (jp)

        #Save state with the setVar/getVar methods on the display
	#displayControl.setVar ('comp', comp)

	#You can also set a component in the legend
	legendComp = JLabel("vertical Crosssection");
	displayControl.setLegendComponent (legendComp);
        displayControl.setVar("ctw","None")



#This gets called when there is data that has been loaded
def exampleData (displayControl):
	#The getDataList method returns a list of the data, one per data choice
	return

#This gets called when the probe position has changed. 
#The probeLocation is an array of EarthLocationTuple-s
#For point, level and  vertical probes the length is 1
#For the horizonal probe the length is 2 (the end points of the probe line)
#For the area probe the  length is 4 (upper-left, upper-right, lower-right, lower-left)
def exampleProbe (displayControl, probeLocation):
        #You can get the current animation time with:
	animationTime = displayControl.getAnimationTime();

	#You can get a list of all animation times with:
	#times = displayControl.getAnimationTimes();

	#You can get a list of all times from the data with:
	#times = displayControl.getTimesFromData();

        #This samples the data at the current probe location
        sample = displayControl.sampleAtTime();
	displayControl.setVar('sample',sample)
        comp = displayControl.getVar ('comp');
	#comp.setText ('sample: ' +str(sample) + ' at:' + str(animationTime))
        #You can also just call sample to get all values across time:
        #sample = displayControl.sample();
        ctw=displayControl.getVar('ctw')
	if ctw=="None":
		ctw=displayControl.getColorTableWidget(displayControl.getRangeForColorTable())
		ct=ctw.getColorTable()
		try:
		     ct.setRange(displayControl.getColorRangeFromData())
		except:
		     ct.setRange(displayControl.getRangeForColorTable())
	displayControl.setVar("ct",ct)
        if animationTime==None:
		sample=sample.getSample(0)	
	nlola=sample.getDomainSet().getLengths()[0]
	nlev=sample.getDomainSet().getLengths()[1]
	levs=getLevels(displayControl.getGridDataInstance().getData())
	displayControl.setVar('levs',levs)
	
        dataset=createMapDataset2(sample,nlola,levs)
        chart=createMapChart(dataset,displayControl,nlola,levs)
	panl=displayControl.getVar('panl')
        panl.setChart(chart)

#This gets called when the animation time changes
def exampleTime (displayControl, probeLocation):
        #Just turn around and call handleProbe
        exampleProbe(displayControl, probeLocation);



def menuCallback(displayControl):
        comp = displayControl.getVar ('comp');
	comp.setText ('menuCallback called')



def createMapDataset2(sample,nlola,levs):
        d = DefaultHeatMapDataset(nlola, len(levs), 1, nlola, min(levs), max(levs));
        for j in range(len(levs)): #-1,-1,-1):
            for i in range(nlola):
                d.setZValue(i, len(levs)-1-j, sample.getValues()[0][j*nlola+i]);
            
        return d;


	
def createMapChart(dataset,displayControl,nlola,levs):
            chart = ChartFactory.createScatterPlot(displayControl.getDataChoice().getName()+" Vertical Crossection",
                    "X", "Y", XYSeriesCollection(), PlotOrientation.VERTICAL, True, False,
                    False);
	    
	    ct=displayControl.getVar('ct')

            ps=LookupPaintScale(ct.getRange().getMin(),ct.getRange().getMax(),ct.getColorList()[0])

	    fr=frange(ct.getRange().getMin(),ct.getRange().getMax(),len(ct.getColorList()))
	    for i in range(len(ct.getColorList())):
	    	ps.add(fr.next(),ct.getColorList()[i])

            image = HeatMapUtilities.createHeatMapImage(dataset,
                    ps);
            ann = XYDataImageAnnotation(image, 1,
                    min(levs), nlola, max(levs), True);
	    displayControl.setVar('ann',ann)
            plot =chart.getPlot();
            plot.setDomainPannable(True);
            plot.setRangePannable(True);
            plot.getRenderer().addAnnotation(ann, Layer.BACKGROUND);

            xAxis = plot.getDomainAxis();
            xAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
            xAxis.setLowerMargin(0.0);
            xAxis.setUpperMargin(0.0);
            displayControl.setVar('xAxis',xAxis)

            yAxis = plot.getRangeAxis();
            yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
            yAxis.setLowerMargin(0.0);
            yAxis.setUpperMargin(0.0);
	    yAxis.setRange(min(levs),max(levs))
	
	    yAxis.setInverted(True)

	    scaleAxis = NumberAxis(displayControl.getDataChoice().getName());
            scaleAxis.setAxisLinePaint(Color.white);
            scaleAxis.setTickMarkPaint(Color.white);
            scaleAxis.setTickLabelFont(Font("Dialog", Font.PLAIN, 7));
	    #scaleAxis.setInverted(True)
	    sample=displayControl.getVar('sample')
	    
	    xAxis.setLabel("N")
	    try:
	    	yAxis.setLabel(str(GridUtil.getVerticalUnit(sample))) 
 	        scaleAxis.setLabel(displayControl.getDataChoice().getName()+" ["+str(GridUtil.getParamUnits(sample)[0])+"]")
     	    except:
		pass


	    legend=PaintScaleLegend(ps,scaleAxis);
            legend.setStripOutlineVisible(False);
            legend.setSubdivisionCount(20);
            legend.setAxisLocation(AxisLocation.BOTTOM_OR_LEFT);
            legend.setAxisOffset(5.0);
            legend.setMargin(RectangleInsets(5, 5, 5, 5));
            legend.setFrame(BlockBorder(Color.white));
            legend.setPadding(RectangleInsets(10, 10, 10, 10));
            legend.setStripWidth(10);
            legend.setPosition(RectangleEdge.LEFT);
            chart.addSubtitle(legend);
            return chart;
def frange(start, stop, N):
     i = start
     while i < stop:
	yield i
	i += float(stop-start)/N

]]></property></control>
<control 
	 id="jythoncontrol_area-casepicker" 
	 description="Area-CasePicker" 
	 class="ucar.unidata.idv.control.JythonControl" 
	 label="Area-CasePicker" 
 displaycategory="Mapes-Collection" 
	 categories="GRID-*" 
	 canstandalone="false" 
	 properties="displayName=Area-CasePicker;windowVisible=true;probeType=area;developerMode=false;" 
><property name="jythonCode"><![CDATA[#These are example jython procedures that get called by the JythonControl 
#These are example jython procedures that get called by the JythonControl 
#These are example jython procedures that get called by the JythonControl 
#at different times. See below for details and examples
from javax.swing import *
from javax.swing.JLabel import *
from javax.swing import JLabel
from javax.swing import JTextArea
from javax.swing import JScrollPane	

from javax.swing import JTextArea
from javax.swing import JTextField
from javax.swing import JScrollPane
from javax.swing import JComboBox

from javax.swing import JPanel
from javax.swing import JButton

from java.awt.event import ActionListener


import java.awt.Dimension
from ucar.unidata.util import FileManager


from ucar.unidata.util import GuiUtils
from ucar.unidata.ui import LatLonWidget
from java.time import ZonedDateTime

from visad import VisADException
from java.lang import Runtime

#This gets called when the JythonControl is first created.
def handleInit (displayControl):
	exampleInit(displayControl);

#This gets called when there is data that has been loaded
def handleData (displayControl):
	exampleData(displayControl);

#This gets called when the probe position has changed. 
def handleProbe (displayControl, probeLocation):
	ULLat=displayControl.getProbeLocation()[0].getLatitude().getValue()
	ULLon=displayControl.getProbeLocation()[0].getLongitude().getValue()
	LRLat=displayControl.getProbeLocation()[2].getLatitude().getValue()
	LRLon=displayControl.getProbeLocation()[2].getLongitude().getValue()

        Lllw=displayControl.getVar('Lllw')
	Lllw.setLat(ULLat)
	Lllw.setLon(ULLon)

	Rllw=displayControl.getVar('Rllw')
	Rllw.setLat(LRLat)
	Rllw.setLon(LRLon)

	AnimationTime=displayControl.getAnimationTime()
	CtimeF=displayControl.getVar('CtimeF')
	
	if not AnimationTime==None:
		CtimeF.setText(str(AnimationTime))

#This gets called when the animation time changes
def handleTime (displayControl, probeLocation):
	handleProbe(displayControl,probeLocation)
	
#This gets called when the JythonControl is first created.
def exampleInit (displayControl):
	#You can add any number of menuitems to the different menus
	#displayControl.addSaveMenuItem('save 2','menuCallback');
	#displayControl.addFileMenuItem('file 1','menuCallback');
	#displayControl.addEditMenuItem('edit 1','menuCallback');
	#displayControl.addViewMenuItem('view 1','menuCallback');
        jp=JPanel()
        jp.setPreferredSize(java.awt.Dimension(500, 400))
	jtf=JTextField(40)
	jtf.setEditable(0)

	displayControl.setVar('jtf',jtf)
        Blisten=ButtonListener(jtf)
	jb=JButton("Bundle Template File")
	jb.addActionListener(Blisten)

	topPanel = GuiUtils.leftRight(jb, jtf)
	jp.add(GuiUtils.top(topPanel))
	Llllisten=Llllistener(displayControl)
	Rlllisten=Rlllistener(displayControl)
	Lllw = LatLonWidget("UL Lat:","UL Lon:",Llllisten)
	Rllw = LatLonWidget("LR Lat:","LR Lon:",Rlllisten)
	displayControl.setVar('Lllw',Lllw)
	displayControl.setVar('Rllw',Rllw)
	centerPanel=GuiUtils.leftRight(Lllw, Rllw)
	#jp.add(GuiUtils.centerPanel)
	
	twidget=JPanel()
	CtimeF=JTextField(12)
	CtimeF.setText("AllTimes")
	CtimeF.setEditable(0)
	displayControl.setVar("CtimeF",CtimeF)
	CtimeL=JLabel("Times")
	CtimeL.setLabelFor(CtimeF)
	twidget.add(CtimeL)
	twidget.add(CtimeF)
	
	ItimeF=JTextField(4)
	ItimeF.setText("1")
	displayControl.setVar("ItimeF",ItimeF)
	ItimeL=JLabel("Time Interval (+/-)")
	ItimeL.setLabelFor(ItimeF)
	ItimeC=JComboBox(['Years',"Months","Weeks","Days","Hours","Minutes","Seconds"])
	ItimeC.setSelectedIndex(3)
        
	displayControl.setVar("jcb",ItimeC)

	displayControl.setVar("ItimeC",ItimeC)
	displayControl.setVar("ItimeF",ItimeF)
	twidget.add(ItimeL)
	twidget.add(ItimeF)
	twidget.add(ItimeC)
	#jp.add(twidget)	

	brunListen=BrunListener(displayControl)
	bottomB=JButton("Save Bundle")
	bottomB.addActionListener(brunListen)
	bottomPanel = GuiUtils.inset(bottomB, 10)
	#jp.add(bottomPanel)
	jp.add(GuiUtils.hspace(10,100))
	jp.add(GuiUtils.topCenterBottom(centerPanel,GuiUtils.hspace(500,50),twidget))
	jp.add(GuiUtils.hspace(500,100)) 
	jp.add(bottomPanel)

	outPanl=JPanel()
	outPanl.setPreferredSize(java.awt.Dimension(500, 400))
	runPanl=JPanel()
	runPanl.setPreferredSize(java.awt.Dimension(500, 1200))
	JSP=JScrollPane(runPanl)
	displayControl.setVar('JSP',runPanl)

	jtfoutdir=JTextField(40)
	jtfoutdir.setEditable(0)
	displayControl.setVar('jtfoutdir',jtfoutdir)
        OutDirBlisten=OutButtonListener(displayControl,jtfoutdir)
	jboutdir=JButton("Output Directory")
	jboutdir.addActionListener(OutDirBlisten)
	topOutPanel = GuiUtils.top(GuiUtils.leftRight(jboutdir,jtfoutdir))
	jpout=JPanel()
	jpout.add(topOutPanel)
	outPanl.add(jpout)
	outPanl.add(JSP)

	tab = GuiUtils.getNestedTabbedPane();
        tab.add("Settings", GuiUtils.top(jp));
        tab.add("Output",GuiUtils.top(outPanl))

	#displayControl.setJythonComponent(jp)
	displayControl.setJythonComponent(tab)

class Rlllistener(ActionListener):
	def __init__(self,displayControl):
		self.displayControl=displayControl
	def actionPerformed(self,event):
		return

class Llllistener(ActionListener):
	def __init__(self,displayControl):
		self.displayControl=displayControl
	def actionPerformed(self,event):
		return

class OutButtonListener(ActionListener):
	def __init__(self,dc,jtf):
		self.displayControl=dc
		self.jtf=jtf
	def actionPerformed(self,event):
		outdir=chooseDirectory()
		self.jtf.setText(str(outdir))

class BrunListener(ActionListener):
	def __init__(self,displayControl):
		self.displayControl=displayControl
		self.bundleFile=displayControl.getVar('jtf')
        	self.dtValue=displayControl.getVar('ItimeF')
		self.dtFormat=displayControl.getVar('ItimeC')

	def actionPerformed(self,event):
		Lllw=displayControl.getVar('Lllw')
		Rllw=displayControl.getVar('Rllw')

		URLat=Lllw.getLat()
		URLon=Lllw.getLon()
		LRLat=Rllw.getLat()
		LRLon=Rllw.getLon()

		aniTime=self.displayControl.getAnimationTime()

		
		if self.bundleFile=="None":
			raise	VisADException("Bundle template fot found, please set it.")		
		if not aniTime==None:
			timeS=parseTime(aniTime.toString(),int(self.dtValue.getText()),self.dtFormat.getSelectedObjects()[0])
			stringISL=islXidvString(self.bundleFile.getText(),URLat,URLon,LRLat,LRLon,timeS[0],timeS[1])
		else:
			stringISL=islXidvString(self.bundleFile.getText(),URLat,URLon,LRLat,LRLon)
		pattern="casepicker_URLat_"+str(URLat)+"_URLon_"+str(URLon)+"_LRLat_"+str(LRLat)+"_LRLon_"+str(LRLon)

                directory=self.displayControl.getVar("jtfoutdir").getText()

		if directory=="":
			fileB=createIslFile(stringISL,directory=None,pattern=pattern,suffix=".isl")
		else:
			fileB=createIslFile(stringISL,directory=directory,pattern=pattern,suffix=".isl")
		self.displayControl.setVar('tempfile',fileB)
		jtf=JTextField(40)
		jtf.setEditable(0)
		jtf.setText(str(fileB))
		jb=JButton("Run")
		JrunListen=JrunListener(str(fileB))
		jb.addActionListener(JrunListen)

		jp=JPanel()
		jp.add(GuiUtils.leftRight(jtf,jb))
		jsp=self.displayControl.getVar("JSP")
		jsp.add(jp)

		try:	
			args=["-islinteractive",str(fileB)]
			#createNewInstance(args)
		except:
			VisADException('Couldnt new create window')

class JrunListener(ActionListener):
	def __init__(self,fileB):
		self.fileB=fileB
	def actionPerformed(self,event):
		try:	
			args=["-islinteractive",str(self.fileB)]
			createNewInstance(args)
		except:
			VisADException('Couldnt new create window')

class ButtonListener(ActionListener):
	def __init__(self,jt):
		self.jt=jt
	def actionPerformed(self,event):
		self.jt.setText(FileManager.getReadFile())



#This gets called when there is data that has been loaded
def exampleData (displayControl):
	#The getDataList method returns a list of the data, one per data choice
	return


#This gets called when the probe position has changed. 
#The probeLocation is an array of EarthLocationTuple-s
#For point, level and  vertical probes the length is 1
#For the horizonal probe the length is 2 (the end points of the probe line)
#For the area probe the  length is 4 (upper-left, upper-right, lower-right, lower-left)
def exampleProbe (displayControl, probeLocation):
        #You can get the current animation time with:
	animationTime = displayControl.getAnimationTime();

	#You can get a list of all animation times with:
	#times = displayControl.getAnimationTimes();

	#You can get a list of all times from the data with:
	#times = displayControl.getTimesFromData();

        #This samples the data at the current probe location
        #sample = displayControl.sampleAtTime();

        #You can also just call sample to get all values across time:
        #sample = displayControl.sample();




def menuCallback(displayControl):
        comp = displayControl.getVar ('comp');
	comp.setText ('menuCallback called')

def islXidvString(BundleFile,ULLat,ULLon,LRLat,LRLon,timeMin='Alltimes',timeMax='Alltimes'):
	if timeMin=="Alltimes":
		XidvString="""<isl>
			<bundle file="%s"  bbox="%s,%s,%s,%s" /> 
			<pause/>
			<center north="%s" west="%s" south="%s" east="%s" />
			</isl>"""%(BundleFile,ULLat,ULLon,LRLat,LRLon,ULLat,ULLon,LRLat,LRLon)
	else:
		XidvString="""<isl>
			<bundle file="%s"  bbox="%s,%s,%s,%s" timedriverstart="%s" timedriverend="%s"/>
			<pause/>
			<center north="%s" west="%s" south="%s" east="%s" />
			</isl>"""%(BundleFile,ULLat,ULLon,LRLat,LRLon,timeMin,timeMax,ULLat,ULLon,LRLat,LRLon)
 
	return XidvString
def islZidvString(fileName,LRLat,LRLon,URLat,URLon,Time,Tdt,displayT=None):
	ZidvString="abc"
	return ZidvString

from java.io import File
from javax.swing import JFileChooser
from java.io import BufferedWriter,FileWriter
from java.io import IOException

def createIslFile(stringISL,directory=None,pattern=None,suffix=".isl"):
    from java.util import Random
    if not pattern:
	rand = Random()
	pattern=rand.nextInt(9999)
	pattern="tmp"+str(pattern)
    if not directory:
        try:
	    IS=idv.getStore()
	    directory=IS.getUniqueTmpDirectory()
	    #pattern=str(directory)+"/"+pattern+suffix
            temp = File(directory,pattern+suffix);	
            temp.deleteOnExit()
            out = BufferedWriter(FileWriter(temp));
            out.write(stringISL);
            out.close();
            return temp
        except IOException:
            raise VisADException("Sorry could not write to tempfile")
    else:
        try:
	    #pattern=directory+"/"+pattern
            temp = File(str(directory),pattern+suffix)# File(dir,pattern+suffix
            out  = BufferedWriter(FileWriter(temp))
            out.write(stringISL)
            out.close()
            return temp
        except IOException:
            raise VisADException("Could not write to file "+directory+pattern+suffix)

class DirectoryChooser(object):
	def __init__(self):
		self.chooser = JFileChooser()
		self.chooser.setCurrentDirectory(File("."));
	def getDirectory(self):
		self.chooser.setDialogTitle("Select Directory");
		self.chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		self.chooser.setAcceptAllFileFilterUsed(False);
		self.chooser.showOpenDialog(None)
		return self.chooser.getSelectedFile()
def chooseDirectory():
		chooser = JFileChooser()
		chooser.setCurrentDirectory(File("."));
		chooser.setDialogTitle("Select Directory");
		chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		chooser.setAcceptAllFileFilterUsed(False);
		chooser.showOpenDialog(None)
		return chooser.getSelectedFile()

def parseTime(aniTimeS,dt,timeIF):
	aniTimeS=aniTimeS.split()
	aniTimeS=aniTimeS[0]+"T"+aniTimeS[1]
	JaniT=ZonedDateTime.parse(aniTimeS)
	diP={"Seconds":JaniT.plusSeconds(dt),"Minutes":JaniT.plusMinutes(dt),"Hours":JaniT.plusHours(dt),"Days":JaniT.plusDays(dt),"Weeks":JaniT.plusWeeks(dt),"Months":JaniT.plusMonths(dt),"Years":JaniT.plusYears(dt)}
	diM={"Seconds":JaniT.minusSeconds(dt),"Minutes":JaniT.minusMinutes(dt),"Hours":JaniT.minusHours(dt),"Days":JaniT.minusDays(dt),"Weeks":JaniT.minusWeeks(dt),"Months":JaniT.minusMonths(dt),"Years":JaniT.minusYears(dt)}
	temp=diM[timeIF].toString().split('T')
	diMS=temp[0]+" "+temp[1][0:-1]
	temp=diP[timeIF].toString().split('T')
	diPS=temp[0]+" "+temp[1][0:-1]
	return diMS,diPS		

def createNewInstance(args):
    runIdv=idv.getClass().getProtectionDomain().getCodeSource().getLocation().getPath().rstrip('idv.jar')+'runIDV'
    args.insert(0,runIdv)
    p=Runtime.getRuntime().exec(args)
    out=p.getOutputStream()
    out.flush()
]]></property></control>
</controls>
